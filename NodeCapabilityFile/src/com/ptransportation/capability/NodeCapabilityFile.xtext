grammar com.ptransportation.capability.NodeCapabilityFile with org.eclipse.xtext.common.Terminals
// org.eclipse.xtext.xbase.Xbase

generate nodeCapabilityFile "http://www.ptransportation.com/capability/NodeCapabilityFile"

NodeCapabilityFile:
	'node_capability_file' ';'
	'LIN_language_version' '=' languageVersion=STRING ';'
	(nodes+=Node)+;

Node:
	'node' name=ID '{'
		'general' '{'
			'LIN_protocol_version' '=' protocolVersion=STRING ';'
			'supplier' '=' supplier=Integer ';'
			'function' '=' function=Integer ';'
			'variant' '=' variant=Integer ';'
			'bitrate' '=' bitrate=Bitrate ';'
			'sends_wake_up_signal' '=' sendsWakeUpSignal=('"yes"' | '"no"') ';'
		'}'

		'diagnostic' '{'
            'NAD' '=' NADSet=NadSet ';'
            'diagnostic_class' '=' diagnosticClass=Integer ';'
            ('P2_min' '=' p2Min=Number 'ms' ';')?
            ('ST_min' '=' stMin=Number 'ms' ';')?
            ('N_As_timeout' '=' nAsTimeout=Number 'ms' ';')?
            ('N_Cr_timeout' '=' nCrTimeout=Number 'ms' ';')?
            ('support_sid' '{' supportedSIDS+=Integer (',' supportedSIDS+=Integer)* '}')?
            ('max_message_length' '=' maxMessageLength=Integer)?
		'}'

		'frames' '{'
		    (frames+=Frame)+
		'}'

		'encoding' '{'
		    (encodings+=Encoding)+
		'}'

		'status_management' '{'
		    'response_error' '=' responseError=[Signal] ';'
		    ('fault_state_signals' '=' faultStateSignals+=[Signal] (',' faultStateSignals+=[Signal])* ';')?
		'}'

		('free_text' '{'
			freeText=STRING
		'}')?
	'}';

Bitrate: SelectBitrate | FixedBitrate | AutomaticBitrate;

AutomaticBitrate:
	{AutomaticBitrate} 'automatic' ('min' minValue=Number 'kbps')? ('max' maxValue=Number 'kbps')? ;

SelectBitrate:
	'select' '{' values+=Number 'kbps' (',' values+=Number 'kbps')* '}'
;

FixedBitrate:
	value=Number 'kbps';

NadSet: NadList | NadRange;

NadList: values+=Integer (',' values+=Integer)*;

NadRange: minValue=Integer 'to' maxValue=Integer;

Frame: 
	(publishes='publish' | subscribes='subscribe') name=ID '{'
		'length' '=' length=Integer ';'
		('min_period' '=' minPeriod=Integer 'ms' ';')?
		('max_period' '=' maxPeriod=Integer 'ms' ';')?
		('event_triggered_frame' '=' eventTriggeredFrame=[Frame] ';')?
		('signals' '{'
			(signals+=Signal)+
		'}')?
	'}';

Signal:
	name=ID '{'
		'size' '=' size=Integer ';'
		'init_value' '=' initialValue=(ScalorSignalValue | ArraySignalValue) ';'
		'offset' '=' offset=Integer ';'
		(encoding=[Encoding] ';')?
	'}';

ScalorSignalValue: value=Integer;
ArraySignalValue: '{' values+=Integer (',' values+=Integer)* '}';

Encoding:
	name=ID '{'
	    (encodedValues+=EncodedValue)+
	'}';

EncodedValue:
	LogicalEncodedValue ';' |
	PhysicalEncodedRange ';' |
	BCDEncodedValue ';' |
	ASCIIEncodedValue ';'
;

LogicalEncodedValue:
	'logical_value' ',' value=Integer (',' textInfo=STRING)?
;

PhysicalEncodedRange:
	'physical_value' ',' minValue=Integer ',' maxValue=Integer ',' scale=Number ',' offset=Number (',' textInfo=STRING)?
;

BCDEncodedValue:
	{BCDEncodedValue} 'bcd_value'
;

ASCIIEncodedValue:
	{ASCIIEncodedValue} 'ascii_value'
;

Number:
	INT ('.' INT)?;

Integer: INT | HEX;

terminal HEX:
	('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F')+;

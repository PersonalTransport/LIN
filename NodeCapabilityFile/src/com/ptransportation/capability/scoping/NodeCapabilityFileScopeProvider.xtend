/*
 * generated by Xtext 2.9.1
 */
package com.ptransportation.capability.scoping

import com.ptransportation.capability.nodeCapabilityFile.Encoding
import com.ptransportation.capability.nodeCapabilityFile.Node
import com.ptransportation.capability.nodeCapabilityFile.NodeCapabilityFilePackage
import com.ptransportation.capability.nodeCapabilityFile.Signal
import java.util.List
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes

/**
 * This class contains custom scoping description.
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class NodeCapabilityFileScopeProvider extends AbstractNodeCapabilityFileScopeProvider {


    override IScope getScope(EObject context, EReference reference) {
        if(context instanceof Node &&
          (reference == NodeCapabilityFilePackage.Literals.NODE__RESPONSE_ERROR ||
           reference == NodeCapabilityFilePackage.Literals.NODE__FAULT_STATE_SIGNALS)) {
            var List<Signal> candidates = EcoreUtil2.getAllContentsOfType(context, Signal)
            var IScope scope = Scopes.scopeFor(candidates)
            return scope
        }
        else if(context instanceof Signal &&
                reference == NodeCapabilityFilePackage.Literals.SIGNAL__ENCODING) {
            var node = EcoreUtil2.getContainerOfType(context,Node);
            var List<Encoding> candidates = EcoreUtil2.getAllContentsOfType(node, Encoding)
            var IScope scope = Scopes.scopeFor(candidates)
            return scope
        }
        return super.getScope(context, reference)
    }

}
commonDriver(node) ::= <<
#include \<stdlib.h>
#include \<stdint.h>
#include \<stdbool.h>

typedef bool l_bool;        //- 0 is false, and non-zero (>0) is true.
typedef uint8_t l_u8;       //- Unsigned 8 bit integer.
typedef uint16_t l_u16;     //- Unsigned 16 bit integer.

struct l_frame {
    l_u8 PID;
    union {
        l_u8 array[8];
        uint64_t scalar;
    } data;
};

<node.signals:{signal|<signalFlagPrototype(signal)>};separator="\n\n">

<node.publishedSignals:{signal|<signal:(signal.signalType_WritePrototype)()>};separator="\n\n">

<node.signals:{signal|<signal:(signal.signalType_ReadPrototype)()>};separator="\n\n">
>>

boolReadPrototype(signal) ::= "l_bool l_bool_rd_<signal.name>();"
u8ReadPrototype(signal) ::= "l_u8 l_u8_rd_<signal.name>();"
u16ReadPrototype(signal) ::= "l_u16 l_u16_rd_<signal.name>();"
bytesReadPrototype(signal) ::= "void l_bytes_rd_<signal.name>(l_u8 start,l_u8 count,l_u8* const data);"

boolWritePrototype(signal) ::= "void l_bool_wr_<signal.name>(l_bool v);"
u8WritePrototype(signal) ::= "void l_u8_wr_<signal.name>(l_u8 v);"
u16WritePrototype(signal) ::= "void l_u16_wr_<signal.name>(l_16 v);"
bytesWritePrototype(signal) ::= "void l_bytes_wr_<signal.name>(l_u8 start,l_u8 count,const l_u8* const data);"

signalFlagPrototype(signal) ::= <<
l_bool l_flg_tst_<signal.name>();

void l_flg_clr_<signal.name>();
>>

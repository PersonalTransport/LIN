driverSource(node,target,interface) ::= <<
#include "<node.name>.h"
<if(target.includes)><(target.includes)()><endif>
<if(interface.includes)><(interface.includes)()><endif>

<node.frames:{frame|#define <frame.name>_INDEX <i0>};separator="\n">

enum l_buffer_state {
    L_BREAK_SYNC,
    L_PID,
    L_DATA_CHECKSUM,
    L_IDLE
};

enum service_identifier {
    // 0 - 0xAF reserved
    ASSIGN_NAD = 0xB0,
    ASSIGN_FRAME_IDENTIFIER = 0xB1, // Obsolete??
    READ_BY_IDENTIFIER = 0xB2,
    CONDITIONAL_CHANGE_NAD = 0xB3,
    DATA_DUMP = 0xB4,
    // 0xB5 reserved
    SAVE_CONFIGURATION = 0xB6,
    ASSIGN_FRAME_IDENTIFIER_RANGE = 0xB7,
    // 0xB8 - 0xFF reserved
};

union l_frame_data {
    l_u8 array[8];
    uint64_t scalar;
    struct {
        l_u8 NAD;
        l_u8 PCI;
        l_u8 SID;
        l_u8 D1;
        l_u8 D2;
        l_u8 D3;
        l_u8 D4;
        l_u8 D5;
    } PUD;
};

struct l_frame {
    l_u8 PID;
    union l_frame_data data;
};

struct l_ioctl_op {
    // TODO add things here?
};

union l_status_register {
    struct {
        unsigned int error_in_response : 1;
        unsigned int successful_transfer : 1;
        unsigned int overrun : 1;
        unsigned int goto_sleep: 1; // TODO update this value
        unsigned int bus_activity : 1; // TODO update this value
        unsigned int event_triggered_frame_collision : 1; // TODO update this value
        unsigned int save_configuration : 1; // TODO update this value
        unsigned int has_frame: 1;
        unsigned int PID : 8;
    } reg;
    l_u16 raw_data;
};

<if(node.master)>
enum l_schedule_entry_type {
    ASSIGN_FRAME_ID_ENTRY,//??
    ASSIGN_FRAME_ID_RANGE_ENTRY,
    ASSIGN_NAD_ENTRY,
    CONDITIONAL_CHANGE_NAD_ENTRY,//??
    //!!DATA_DUMP_ENTRY,
    FREE_FORMAT_ENTRY,//??
    MASTER_REQ_ENTRY,
    SAVE_CONFIGURATION_ENTRY,
    SLAVE_RESP_ENTRY,
    UNCONDITIONAL_ENTRY
};

struct l_schedule_entry {
    enum l_schedule_entry_type type; // TODO could be 4 bit unsigned
    l_u8 ticks;
    union {
        struct l_frame *frame; // TODO change to PID!
        l_u8 configured_NAD;
        //TODO add others
    } data;
};

struct l_schedule {
    l_u8 size;
    struct l_schedule_entry *entries;
};

struct l_schedule_instance {
    struct l_schedule *schedule;
    l_u8 tick;
    l_u8 index;
    struct l_schedule_entry *entry;
};
<endif>

union l_status_register <interface.name>_status = {.raw_data=0};

static struct {
    enum l_buffer_state state;
    l_u8 PID;
    union l_frame_data data;
    l_u8 checksum;
    l_u8 size;
    l_u8 index;
} tx_buffer, rx_buffer;

static struct l_frame frames[] = {
<node.frames:{frame|
    {   // <frame.name>
        .PID = <if(frame.ID)>L_FRAME_PID(<frame.ID>)<else>0xFF<endif>, // TODO is 0xFF Invalid
        .data.scalar = 0ULL // TODO initial data
    \}};separator=",\n">
};

<if(node.master)>
struct l_schedule _L_NULL_SCHEDULE = {0,NULL};

<node.scheduleTables:{schedule|
static struct l_schedule_entry _<schedule.name>_entries[] = {
    <schedule.entries:{entry|<entry:(entry.polymorphic_Initialization)()>};separator=",\n">
\};
struct l_schedule _<schedule.name> = {sizeof(_<schedule.name>_entries)/sizeof(struct l_schedule_entry),_<schedule.name>_entries\};
};separator="\n">
static struct l_schedule_instance current = {L_NULL_SCHEDULE,0,0,NULL};
static struct l_schedule_instance next    = {NULL,0,0,NULL};

<else>
static l_u8 NAD = <node.initialNAD.hex>; // TODO this needs to be implemented.
static l_u16 supplier_id = <node.supplier.hex>;
static l_u16 function_id = <node.function.hex>;
static l_u8 variant_id = <node.variant>;
<endif>

<node.frames:{frame|

static l_bool <frame.name>_flag = false;
<frame.signals:{signal|

static l_bool <signal.name>_flag = false;}>}>

static void setup_tx_<interface.name>(l_u8 PID);
static void setup_rx_<interface.name>(l_u8 PID);
static void cleanup_tx_<interface.name>();
static void cleanup_rx_<interface.name>();
<if(target.globals)><(target.globals)(node)><endif>
<if(interface.globals)><(interface.globals)(node)><endif>

l_bool l_sys_init() {
    tx_buffer.PID = 0xFF;
    tx_buffer.size = 0;
    tx_buffer.index = 0;
    tx_buffer.data.scalar = 0;
    tx_buffer.state = L_IDLE;

    rx_buffer.PID = 0xFF;
    rx_buffer.size = 0;
    rx_buffer.index = 0;
    rx_buffer.data.scalar = 0;
    rx_buffer.state = L_IDLE;

    <systemInitialization()>

    return false;
}
<if(node.master)>

l_u8 l_sch_tick_<interface.name>() {
    // TODO the spec hints at using l_sys_irq_disable
    // but I do not see a need for it; maybe around setup/cleanup.
    if(next.schedule != NULL && current.tick == 0) {
        current = next;
        next.schedule = NULL;
    }

    if(current.schedule == L_NULL_SCHEDULE) {
        return 0;
    }

    struct l_schedule_entry *entry = current.entry;
    switch(entry->type) {
        case UNCONDITIONAL_ENTRY: {
            if(rx_buffer.state == L_IDLE && rx_buffer.size != 0)
                cleanup_rx_<interface.name>();

            if(tx_buffer.state == L_IDLE && tx_buffer.size != 0)
                cleanup_tx_<interface.name>();

            struct l_frame *frame = entry->data.frame;
            if(current.tick == 0) {
                setup_tx_<interface.name>(frame->PID);
                setup_rx_<interface.name>(frame->PID);
                l_ifc_tx_<interface.name>();
            }

            break;
        }
        // TODO add the rest!
    }

    if(current.tick >= entry->ticks-1) {
        current.tick = 0;
        current.index = (current.index \< current.schedule->size-1) ? current.index+1 : 0;
        current.entry = &current.schedule->entries[current.index];
        return current.index+1;
    }

    current.tick++;
    return 0;
}

void l_sch_set_<interface.name>(struct l_schedule *schedule, l_u8 entry) {
    if(schedule != NULL) {
        next.schedule = schedule;
        next.tick     = 0;
        next.index    = (entry > 0) ? entry-1 : 0; // TODO check if the entry is in the schedule??
        next.entry    =  &schedule->entries[next.index];
    }
}
<endif>

l_bool l_ifc_init_<interface.name>() {
    <(interface.initialization)(node)>
    return false;
}
<if(node.master)>

void l_ifc_goto_sleep_<interface.name>() {
    // TODO implement!
}
<endif>
<if(node.sendsWakeUpSignal)>

void l_ifc_wake_up_<interface.name>()  {
    // TODO implement!
}
<endif>

l_u16 l_ifc_ioctl_<interface.name>(struct l_ioctl_op op, void* pv) {
    // TODO implement!
}

static inline void setup_rx_<interface.name>(l_u8 PID) {
    rx_buffer.PID = PID;

    if(PID == 0xff) {
        // TODO special
    }
    else if(PID == 0x3C) {
        // TODO master request
    }
    else if(PID == 0x3D) {
        // TODO slave response
    }
<node.subscribe_frames:{frame|
    else if(PID == frames[<frame.name>_INDEX].PID) {
        rx_buffer.state = L_DATA_CHECKSUM;
        rx_buffer.size = <frame.length>;
        rx_buffer.index = 0;
    \}};separator="\n">
    else {
        rx_buffer.state = L_IDLE;
        rx_buffer.size  = 0;
        rx_buffer.index = 0;
    }
}

static inline void cleanup_rx_<interface.name>() {
    l_u16 classic_checksum = 0;
    l_u16 enhanced_checksum = rx_buffer.PID;

    for(l_u8 i=0;i\<rx_buffer.size;++i) {
        classic_checksum += rx_buffer.data.array[i];
        if(classic_checksum >= 256)
            classic_checksum -= 255;

        enhanced_checksum += rx_buffer.data.array[i];
        if(enhanced_checksum >= 256)
            enhanced_checksum -= 255;
    \}
    classic_checksum = ~classic_checksum;
    enhanced_checksum = ~enhanced_checksum;

    if(rx_buffer.PID == 0xff) {
        // TODO special
    }
    else if(rx_buffer.PID == 0x3C) {
        // TODO master request
    }
    else if(rx_buffer.PID == 0x3D) {
        // TODO slave response
    }
<node.subscribe_frames:{frame|
    else if(rx_buffer.PID == frames[<frame.name>_INDEX].PID) {
        <interface.name>_status.reg.PID = rx_buffer.PID;
        <interface.name>_status.reg.overrun = <interface.name>_status.reg.has_frame;
        <interface.name>_status.reg.has_frame = true;
        if((l_u8)<if(frame.useClassicChecksum)>classic_checksum<else>enhanced_checksum<endif> == rx_buffer.checksum) {
            <interface.name>_status.reg.successful_transfer = true;
            frames[<frame.name>_INDEX].data.scalar = rx_buffer.data.scalar;
            <frame.name>_flag = true;
            <frame.signals:{signal|<signal.name>_flag = true;};separator="\n">
        \}
        else {
            <interface.name>_status.reg.error_in_response = true;
            <interface.name>_status.reg.successful_transfer = false;
            // TODO should set response_error signal
        \}
    \}};separator="\n">
    rx_buffer.PID = 0xFF;
    rx_buffer.size = 0;
    rx_buffer.index = 0;
    rx_buffer.data.scalar = 0;
    rx_buffer.state = L_IDLE;
}

void l_ifc_rx_<interface.name>() {
    while(<(interface.rxDataAvailable)()>) {
        switch(rx_buffer.state) {
            case L_BREAK_SYNC: {
                rx_buffer.state = L_PID;
                <if(node.slave)>
                <(interface.rxBreakSync)()>
                <endif>
                break;
            }
            case L_PID: {
                rx_buffer.state = L_DATA_CHECKSUM;
                <if(node.slave)>
                <(interface.rxData)("rx_buffer.PID")>
                setup_tx_<interface.name>(rx_buffer.PID);
                setup_rx_<interface.name>(rx_buffer.PID);
                l_ifc_tx_<interface.name>();
                <endif>
                break;
            }
            case L_DATA_CHECKSUM: {
                if(rx_buffer.index \< rx_buffer.size) {
                    <(interface.rxData)("rx_buffer.data.array[rx_buffer.index]")>
                    rx_buffer.index++;
                }
                else {
                    rx_buffer.state = L_IDLE;
                    if(rx_buffer.size > 0) {
                        <(interface.rxData)("rx_buffer.checksum")>
                        <if(node.slave)>
                        cleanup_rx_<interface.name>();
                        <endif>
                    }
                }
                break;
            }
            case L_IDLE: {
                // TODO only the slave should eat data that this node does not care about, right?
                <(interface.rxData)("l_u8 data")> // Just eat the data that this node does not care about!
                (void)data; // Shut the compiler up about data not being used.
                break;
            }
        }
    }
}

static inline void setup_tx_<interface.name>(l_u8 PID) {
    l_u16 checksum = 0;
    tx_buffer.PID = PID;

    if(PID == 0xff) {
        // TODO special
    }
    else if(PID == 0x3C) {
        // TODO master request
    }
    else if(PID == 0x3D) {
        // TODO slave response
    }
<node.publish_frames:{frame|
    else if(PID == frames[<frame.name>_INDEX].PID) {
    <if(node.master)>
        tx_buffer.state = L_BREAK_SYNC;
    <else>
        tx_buffer.state = L_DATA_CHECKSUM;
    <endif>
        tx_buffer.size = <frame.length>;
        tx_buffer.index = 0;
        <if(!frame.useClassicChecksum)>checksum = PID;<endif>
        tx_buffer.data.scalar = frames[<frame.name>_INDEX].data.scalar;
    \}};separator="\n">
    else {
<if(node.master)>
        tx_buffer.state = L_BREAK_SYNC;
<else>
        tx_buffer.state = L_IDLE;
<endif>
        tx_buffer.size  = 0;
        tx_buffer.index = 0;
    }

    for(l_u8 i=0;i\<tx_buffer.size;++i) {
        checksum += tx_buffer.data.array[i];
        if(checksum >= 256)
            checksum -= 255;
    \}
    tx_buffer.checksum = (l_u8)~checksum;
}

static inline void cleanup_tx_<interface.name>() {
    if(tx_buffer.PID == 0xff) {
        // TODO special
    }
    else if(tx_buffer.PID == 0x3C) {
        // TODO master request
    }
    else if(tx_buffer.PID == 0x3D) {
        // TODO slave response
    }
<node.publish_frames:{frame|
    else if(tx_buffer.PID == frames[<frame.name>_INDEX].PID) {
        <interface.name>_status.reg.PID = tx_buffer.PID;
        <interface.name>_status.reg.successful_transfer = true;
        <interface.name>_status.reg.overrun = <interface.name>_status.reg.has_frame;
        <interface.name>_status.reg.has_frame = true;
        <frame.name>_flag = true;
        <frame.signals:{signal|<signal.name>_flag = true;};separator="\n">
    \}};separator="\n">
    tx_buffer.PID = 0xFF;
    tx_buffer.size = 0;
    tx_buffer.index = 0;
    tx_buffer.data.scalar = 0;
    tx_buffer.state = L_IDLE;
}

void l_ifc_tx_<interface.name>() {
    switch(tx_buffer.state) {
        case L_BREAK_SYNC: {
            tx_buffer.state = L_PID;
            <if(node.master)>
            <(interface.txBreakAndSync)()>
            <endif>
            break;
        }
        case L_PID: {
            tx_buffer.state = L_DATA_CHECKSUM;
            tx_buffer.index = 0;
            <if(node.master)>
            <(interface.txData)("tx_buffer.PID")>  // Send the PID.
            <endif>
            break;
        }
        case L_DATA_CHECKSUM: {
            if(tx_buffer.index \< tx_buffer.size) {
                <(interface.txData)("tx_buffer.data.array[tx_buffer.index]")> // Send the data.
                tx_buffer.index++;
            }
            else {
                tx_buffer.state = L_IDLE;
                if(tx_buffer.size > 0) {
                    tx_buffer.size  = 0;
                    tx_buffer.index = 0;
                    <(interface.txData)("tx_buffer.checksum")> // Send the checksum.
                    <if(node.slave)>
                    cleanup_tx_<interface.name>();
                    <endif>
                }
            }
            break;
        }
        case L_IDLE: {
            break;
        }
    }
}

void l_ifc_aux_<interface.name>() {
    // TODO implement!
}

l_u16 l_ifc_read_status_<interface.name>() {
    l_u16 r = <interface.name>_status.raw_data;
    <interface.name>_status.raw_data = 0;
    return r & 0xFF7F;
}
<if(node.master)>

l_u8 ld_is_ready_<interface.name>() {
    // TODO implement!
}

void ld_check_response_<interface.name>(l_u8* const RSID,l_u8* const error_code) {
    // TODO implement!
}

void ld_assign_frame_id_range_<interface.name>(l_u8 NAD,l_u8 start_index,const l_u8* const PIDs) {
    // TODO implement!
}

void ld_assign_NAD_<interface.name>(l_u8 initial_NAD,l_u16 supplier_id,l_u16 function_id,l_u8 new_NAD) {
    // TODO implement!
}

void ld_save_configuration_<interface.name>(l_u8 NAD) {
    // TODO implement!
}

void ld_conditional_change_NAD_<interface.name>(l_u8 NAD,l_u8 id,l_u8 byte,l_u8 mask,l_u8 invert,l_u8 new_NAD) {
    // TODO implement!
}

void ld_read_by_id_<interface.name>(l_u8 NAD,l_u16 supplier_id,l_u16 function_id,l_u8 id,l_u8* const data) {
    // TODO implement!
}
<else>

l_u8 ld_read_configuration_<interface.name>(l_u8* const data,l_u8* const length) {
    // TODO implement!
}

l_u8 ld_set_configuration_<interface.name>(const l_u8* const data,l_u16 length) {
    // TODO implement!
}
<endif>

<testFlagImplementations(node)>
<clearFlagImplementations(node)>
<readSignalImplementations(node)>
<writeSignalImplementations(node)>
>>

testFlagImplementations(node) ::= <<
<node.frames:{frame|
<testFlagImplementation(frame.name)>
<frame.signals:{signal|
<testFlagImplementation(signal.name)>}>}>
>>

clearFlagImplementations(node) ::= <<
<node.frames:{frame|
<clearFlagImplementation(frame.name)>
<frame.signals:{signal|<clearFlagImplementation(signal.name)>}>}>
>>

readSignalImplementations(node) ::= <<
<node.frames:{frame|
<frame.signals:{signal|<signal:(signal.signalType_ReadImplementation)()>}>}>
>>


writeSignalImplementations(node) ::= <<
<node.frames:{frame|
<if(frame.publishes)><frame.signals:{signal|<signal:(signal.signalType_WriteImplementation)()>}><endif>}>
>>

boolReadImplementation(signal) ::= <<


l_bool l_bool_rd_<signal.name>() {
    return (l_bool)((frames[<signal.frame.name>_INDEX].data.scalar >\> <signal.offset>) & <signal.signalMask.hex>ULL);
}>>

u8ReadImplementation(signal) ::= <<


l_u8 l_u8_rd_<signal.name>() {
    return (l_u8)((frames[<signal.frame.name>_INDEX].data.scalar >\> <signal.offset>) & <signal.signalMask.hex>ULL);
}>>

u16ReadImplementation(signal) ::= <<


l_u16 l_u16_rd_<signal.name>() {
    return (l_u16)((frames[<signal.frame.name>_INDEX].data.scalar >\> <signal.offset>) & <signal.signalMask.hex>ULL);
}>>

bytesReadImplementation(signal) ::= <<


void l_bytes_rd_<signal.name>(l_u8 start,l_u8 count,l_u8* const data) {
    // TODO check for count being to large??
    for(l_u8 i=0;i\<count;++i)
        data[i] = frames[<signal.frame.name>_INDEX].data[<signal.offset>/8+start+i];
}>>



boolWriteImplementation(signal) ::= <<


void l_bool_wr_<signal.name>(l_bool v) {
    frames[<signal.frame.name>_INDEX].data.scalar &= ~(<signal.signalMask.hex>ULL \<\< <signal.offset>);
    frames[<signal.frame.name>_INDEX].data.scalar |= (((uint64_t)v & <signal.signalMask.hex>ULL) \<\< <signal.offset>);
}>>

u8WriteImplementation(signal) ::= <<


void l_u8_wr_<signal.name>(l_u8 v) {
    frames[<signal.frame.name>_INDEX].data.scalar &= ~(<signal.signalMask.hex>ULL \<\< <signal.offset>);
    frames[<signal.frame.name>_INDEX].data.scalar |= (((uint64_t)v & <signal.signalMask.hex>ULL) \<\< <signal.offset>);
}>>

u16WriteImplementation(signal) ::= <<


void l_u16_wr_<signal.name>(l_u16 v) {
    frames[<signal.frame.name>_INDEX].data.scalar &= ~(<signal.signalMask.hex>ULL \<\< <signal.offset>);
    frames[<signal.frame.name>_INDEX].data.scalar |= (((uint64_t)v & <signal.signalMask.hex>ULL) \<\< <signal.offset>);
}>>

bytesWriteImplementation(signal) ::= <<


void l_bytes_wr_<signal.name>(l_u8 start,l_u8 count,const l_u8* const data) {
    frames[<signal.frame.name>_INDEX].data.scalar &= ~(<signal.signalMask.hex>ULL \<\< <signal.offset>);
    frames[<signal.frame.name>_INDEX].data.scalar |= (((uint64_t)v & <signal.signalMask.hex>ULL) \<\< <signal.offset>);
}>>



testFlagImplementation(name) ::= <<


l_bool l_flg_tst_<name>() {
    return <name>_flag;
}
>>

clearFlagImplementation(name) ::= <<


void l_flg_clr_<name>() {
    <name>_flag = false;
}
>>


//====================================================================================================================//
// TODO implement this!
assignFrameIdEntryInitialization(entry) ::= "{.type = ASSIGN_FRAME_ID_ENTRY,.ticks = <entry.ticks>}"
//====================================================================================================================//


//====================================================================================================================//
// TODO implement this!
assignFrameIdRangeEntryInitialization(entry) ::= "{.type = ASSIGN_FRAME_ID_RANGE_ENTRY,.ticks = <entry.ticks>}"
//====================================================================================================================//


//====================================================================================================================//
// TODO implement this!
assignNADEntryInitialization(entry) ::= "{.type = ASSIGN_NAD_ENTRY,.ticks = <entry.ticks>,.data.configured_NAD = <entry.slave.configuredNAD.hex>}"
//====================================================================================================================//


//====================================================================================================================//
// TODO implement this!
conditionalChangeNADEntryInitialization(entry) ::= "{.type = CONDITIONAL_CHANGE_NAD_ENTRY,.ticks = <entry.ticks>}"
//====================================================================================================================//


//====================================================================================================================//
// TODO implement this!
dataDumpEntryInitialization(entry) ::= "{.type = DATA_DUMP_ENTRY,.ticks = <entry.ticks>}"
//====================================================================================================================//


//====================================================================================================================//
// TODO implement this!
freeFormatEntryInitialization(entry) ::= "{.type = FREE_FORMAT_ENTRY,.ticks = <entry.ticks>}"
//====================================================================================================================//


//====================================================================================================================//
// TODO implement this!
masterReqEntryInitialization(entry) ::= "{.type = MASTER_REQ_ENTRY,.ticks = <entry.ticks>}"
//====================================================================================================================//


//====================================================================================================================//
// TODO implement this!
saveConfigurationEntryInitialization(entry) ::= "{.type = SAVE_CONFIGURATION_ENTRY,.ticks = <entry.ticks>}"
//====================================================================================================================//


//====================================================================================================================//
// TODO implement this!
slaveRespEntryInitialization(entry) ::= "{.type = SLAVE_RESP_ENTRY,.ticks = <entry.ticks>}"
//====================================================================================================================//


//====================================================================================================================//
frameEntryInitialization(entry) ::= "{.type = UNCONDITIONAL_ENTRY,.ticks = <entry.ticks>,.data.frame = &frames[<entry.frame.name>_INDEX]}"
//====================================================================================================================//

driverHeader(node,interface,target) ::= <<
#ifndef <node.name>_<interface.name>_DRIVER_H
#define <node.name>_<interface.name>_DRIVER_H

#include \<stdlib.h>
#include \<stdint.h>
#include \<stdbool.h>
<if(target.includes)><(target.includes)()><endif>
<if(interface.includes)><(interface.includes)()><endif>

#define L_FRAME_PID(id) (~((id \<\< 6) ^ (id \<\< 4) ^ (id \<\< 3) ^ (id \<\< 2)) & 0x80) |\
                         (((id \<\< 6) ^ (id \<\< 5) ^ (id \<\< 4) ^ (id \<\< 2)) & 0x40) |\
                         (id & 0x3F)

typedef bool l_bool;        //- 0 is false, and non-zero (>0) is true.
typedef uint8_t l_u8;       //- Unsigned 8 bit integer.
typedef uint16_t l_u16;     //- Unsigned 16 bit integer.

struct l_ioctl_op;
struct l_irqmask;
<if(node.master)>
struct l_schedule;

enum l_configuration_status {
    LD_SERVICE_BUSY,
    LD_REQUEST_FINISHED,
    LD_SERVICE_IDLE,
    LD_SERVICE_ERROR
};

extern struct l_schedule _L_NULL_SCHEDULE;
<node.scheduleTables:{schedule|extern struct l_schedule _<schedule.name>;};separator="\n">

#define L_NULL_SCHEDULE &_L_NULL_SCHEDULE
<node.scheduleTables:{schedule|#define <schedule.name> &_<schedule.name>};separator="\n">
<endif>

<if(target.globals)><(target.globals)(node)><endif>
<if(interface.globals)><(interface.globals)(node)><endif>

/**
* Initialize the core api.
*
* @NOTE l_sys_init must be called before
*       any other Core API functions.
*
* @returns true if failed.
*          false otherwise.
**/
l_bool l_sys_init();

<if(node.master)>
/**
* Advances the current schedule one tick.
* When the end of a schedule is reached
* the schedule starts over. It will also
* update the signals that have been relieved
* since the last call.
*
* @NOTE The frequency that this function is called
*       sets the time base of the cluster, because of
*       this make that frequency is as stable
*       as possible.
*
* @returns next schedule entry's number if the next call to l_sch_tick_<interface.name>
*               will start the transmission of a frame.
*          zero if the next call to l_sch_tick_<interface.name>
*               will not start a transmission of a frame.
*
*
**/
l_u8 l_sch_tick_<interface.name>();

/**
*
* Sets the next schedule to be followed
* once the current schedule starts it's
* next entry.
*
* @NOTE be careful entries in schedules are
*       one based indexing NOT zero!
*
* @param schedule the schedule to start.
* @param entry the entry to start the schedule at 0 or 1
               will start the schedule from the start.
**/
void l_sch_set_<interface.name>(struct l_schedule *schedule, l_u8 entry);
<endif>

/**
*
* Setup the hardware for the interface
* <interface.name>, such as baud rate.
* It also sets the current schedule
* table to the L_NULL_SCHEDULE;
*
* @NOTE l_ifc_init_<interface.name> must be called before
*       any other interface functions.
*
* @returns true if failed false otherwise.
**/
l_bool l_ifc_init_<interface.name>();
<if(node.master)>

/**
*
* Will schedule a goto sleep command when the
* next schedule entry is due. If the command
* was successfully transmitted the goto sleep
* bit will be set in the status register.
*
* @NOTE this does change the MCU's power state
*       that is up to the application to do.
**/
void l_ifc_goto_sleep_<interface.name>();
<endif>
<if(node.sendsWakeUpSignal)>

/**
*
* Transmit one wake up signal directly when
* this function is called.
*
* @NOTE this only transmits one wake up signal
*       it is up to the application to follow
*       the wake up sequence defined in section
*       2.6.2 of the LIN spec.
**/
void l_ifc_wake_up_<interface.name>();
<endif>

/**
*
* l_ifc_ioctl_<interface.name> is used for hardware
* specific parameters such as wakeup detection
* and currently is not implemented.
**/
l_u16 l_ifc_ioctl_<interface.name>(struct l_ioctl_op op, void* pv);

/**
*
* l_ifc_rx_<interface.name> must be called by the
* application when data is received, on UART based
* implementations it will be the reception of one
* char of data.
**/
void l_ifc_rx_<interface.name>();

/**
*
* l_ifc_tx_<interface.name> must be called by the
* application when data is transmitted, on UART based
* implementations it will be the transition of one
* char of data.
**/
void l_ifc_tx_<interface.name>();

/**
* Synchronize to the break sync field
* transmission.
**/
void l_ifc_aux_<interface.name>();

/**
* @returns status of the previous communication.
*          for more details see section 7.2.5.8
*          of the LIN spec.
**/
l_u16 l_ifc_read_status_<interface.name>();

/**
* l_sys_irq_disable MUST be provided
* by the application and it must disable
* any LIN specific interrupts.
*
* @returns the interrupt mask.
**/
struct l_irqmask l_sys_irq_disable();

/**
* l_sys_irq_restore MUST be provided
* by the application and it must restore
* any LIN specific interrupts.
*
* @param the interrupt mask.
**/
void l_sys_irq_restore(struct l_irqmask previous);
<if(node.master)>

/**
* @returns the status of the last configuration service.
**/
l_u8 ld_is_ready_<interface.name>();

/**
* returns the result of the last configuration service.
* @param RSID where to store the response service identifier.
* @param error_code where to store the error_code if any.
**/
void ld_check_response_<interface.name>(l_u8* const RSID,l_u8* const error_code);

/**
* Assign the PIDs of 4 frames with values or don't cares.
* @param NAD the NAD address of the slave frames which to assign
* @param start_index the index of the first frame in the slave to assing PID to.
* @param PIDs an array of 4 PIDS to assign or don't care 0xFF.
**/
void ld_assign_frame_id_range_<interface.name>(l_u8 NAD,l_u8 start_index,const l_u8* const PIDs);

/**
* Assign the slave with supplier_id,function_id,and initial_NAD a new NAD address.
* @param initial_NAD the initial NAD of the target slave.
* @param supplier_id the supplier ID of the target slave.
* @param function_id the function ID of the target slave.
* @param new_NAD the new NAD to assign the target slave.
**/
void ld_assign_NAD_<interface.name>(l_u8 initial_NAD,l_u16 supplier_id,l_u16 function_id,l_u8 new_NAD);

/**
* Make a save configuration request to a slave, or all slaves
* if NAD is the broadcast NAD(0x7F).
* @param NAD the address of the slave.
**/
void ld_save_configuration_<interface.name>(l_u8 NAD);

/**
* TODO documentation!
**/
void ld_conditional_change_NAD_<interface.name>(l_u8 NAD,l_u8 id,l_u8 byte,l_u8 mask,l_u8 invert,l_u8 new_NAD);

/**
* TODO documentation!
**/
void ld_read_by_id_<interface.name>(l_u8 NAD,l_u16 supplier_id,l_u16 function_id,l_u8 id,l_u8* const data);
<else>

/**
* TODO documentation!
**/
l_u8 ld_read_configuration_<interface.name>(l_u8* const data,l_u8* const length);

/**
* TODO documentation!
**/
l_u8 ld_set_configuration_<interface.name>(const l_u8* const data,l_u16 length);
<endif>

<testFlagPrototypes(node,interface,target)>
<clearFlagPrototypes(node,interface,target)>
<readSignalPrototypes(node,interface,target)>
<writeSignalPrototypes(node,interface,target)>

#endif //<node.name>_<interface.name>_DRIVER_H
>>

testFlagPrototypes(node,interface,target) ::= <<
<node.frames:{frame|
<testFlagPrototype(frame.name,node,interface,target)>
<frame.signals:{signal|
<testFlagPrototype(signal.name,node,interface,target)>}>}>
>>

clearFlagPrototypes(node,interface,target) ::= <<
<node.frames:{frame|
<clearFlagPrototype(frame.name,node,interface,target)>
<frame.signals:{signal|<clearFlagPrototype(signal.name,node,interface,target)>}>}>
>>

readSignalPrototypes(node,interface,target) ::= <<
<node.frames:{frame|
<frame.signals:{signal|<signal:(signal.signalType_ReadPrototype)(frame,node,interface,target)>}>}>
>>


writeSignalPrototypes(node,interface,target) ::= <<
<node.publishFrames:{frame|
<frame.signals:{signal|<signal:(signal.signalType_WritePrototype)(frame,node,interface,target)>}>}>
>>

scalarReadSignalComment(signal,frame,node,interface,target) ::= <<


/**
*
<if(signal.description)>
* <signal.description>
*
<endif>
* @returns current value of <signal.name>.
**/
>>

boolReadPrototype(signal,frame,node,interface,target) ::= <<
<scalarReadSignalComment(signal,frame,node,interface,target)>
l_bool l_bool_rd_<signal.name>();
>>

u8ReadPrototype(signal,frame,node,interface,target) ::= <<
<scalarReadSignalComment(signal,frame,node,interface,target)>
l_u8 l_u8_rd_<signal.name>();
>>

u16ReadPrototype(signal,frame,node,interface,target) ::= <<
<scalarReadSignalComment(signal,frame,node,interface,target)>
l_u16 l_u16_rd_<signal.name>();
>>

bytesReadPrototype(signal,frame,node,interface,target) ::= <<


/**
*
<if(signal.description)>
* <signal.description>
*
<endif>
* @param start first byte to read from.
* @param count number of bytes to read.
* @param data where to store the data.
**/
void l_bytes_rd_<signal.name>(l_u8 start,l_u8 count,l_u8* const data);
>>



scalarWriteSignalComment(signal,frame,node,interface,target) ::= <<


/**
*
<if(signal.description)>
* <signal.description>
*
<endif>
* @param v the value to <signal.name> to.
**/
>>

boolWritePrototype(signal,frame,node,interface,target) ::= <<
<scalarWriteSignalComment(signal,frame,node,interface,target)>
void l_bool_wr_<signal.name>(l_bool v);
>>

u8WritePrototype(signal,frame,node,interface,target) ::= <<
<scalarWriteSignalComment(signal,frame,node,interface,target)>
void l_u8_wr_<signal.name>(l_u8 v);
>>

u16WritePrototype(signal,frame,node,interface,target) ::= <<
<scalarWriteSignalComment(signal,frame,node,interface,target)>
void l_u16_wr_<signal.name>(l_u16 v);
>>

bytesWritePrototype(signal,frame,node,interface,target) ::= <<


/**
*
<if(signal.description)>
* <signal.description>
*
<endif>
* @param start first byte to write to.
* @param count number of bytes to write.
* @param data where to get the data from.
**/
void l_bytes_wr_<signal.name>(l_u8 start,l_u8 count,const l_u8* const data);
>>



testFlagPrototype(name,node,interface,target) ::= <<


/**
* @returns if the <name> has been received/transmitted by the driver.
**/
l_bool l_flg_tst_<name>();
>>

clearFlagPrototype(name,node,interface,target) ::= <<


/**
* Informs then driver that the application has consumed/published <name>'s new value.
**/
void l_flg_clr_<name>();
>>

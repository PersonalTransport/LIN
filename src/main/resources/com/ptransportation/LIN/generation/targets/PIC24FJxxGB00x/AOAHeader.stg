aoaHeader(options,node,target) ::= <<
#ifndef <node.name>_AOA_H
#define <node.name>_AOA_H

#include \<stdint.h>

enum usb_message_com {
    USBMESSAGE_COMM_SET_VAR = 0x66,
    USBMESSAGE_COMM_GET_VAR = 0x77,
    USBMESSAGE_COMM_WARN_VAR = 0x11
};

struct __attribute__((packed)) usb_message_header {
    uint8_t comm; // Defines the type of instruction (set, get, warn)
    uint32_t sid; // Defines what the command is about (lights, blinkers, battery, speed, etc.)
    uint8_t length; // Defines the length of the data
};

struct __attribute__((packed)) usb_message {
    struct usb_message_header header;
    uint8_t data[8];
};

#define MAX_USB_MESSAGE_SIZE sizeof(struct usb_message)

void <node.name>_aoa_initialize();

void <node.name>_aoa_update();

#endif //<node.name>_AOA_H
>>
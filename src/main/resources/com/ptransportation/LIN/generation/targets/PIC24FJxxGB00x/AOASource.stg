aoaSource(options,node,target) ::= <<
#include "<node.name>_aoa.h"
#include "<node.name>.h"

#include \<usb.h>
#include \<usb_host_android.h>

enum usb_message_com {
    USBMESSAGE_COMM_SET_VAR = 0x66,
    USBMESSAGE_COMM_GET_VAR = 0x77,
    USBMESSAGE_COMM_WARN_VAR = 0x11
};

struct __attribute__((packed)) usb_message_header {
    uint8_t comm; // Defines the type of instruction (set, get, warn)
    uint32_t sid; // Defines what the command is about (lights, blinkers, battery, speed, etc.)
    uint8_t length; // Defines the length of the data
};

struct __attribute__((packed)) usb_message {
    struct usb_message_header header;
    uint8_t data[8];
};

#define USB_BUFFER_SIZE 64
#define MAX_ALLOWED_CURRENT 500
#define MAX_USB_MESSAGE_SIZE sizeof(struct usb_message)

static char manufacturer[] = "Personal Transportation Solutions";
static char model[] = "EvMaster";
static char description[] = "LIN master node";
static char version[] = "0.1";
static char uri[] = "http://ptransportation.com/";
static char serial[] = "N/A";

ANDROID_ACCESSORY_INFORMATION device_info = {
    manufacturer,
    sizeof(manufacturer),
    model,
    sizeof(model),
    description,
    sizeof(description),
    version,
    sizeof(version),
    uri,
    sizeof(uri),
    serial,
    sizeof(serial)
};

static uint8_t error_code;
static bool device_attached = false;
static void* device_handle = NULL;

static l_bool read_in_progress = false;
static uint32_t read_size = 0;
static l_u8 read_buffer[USB_BUFFER_SIZE];

static l_bool write_in_progress = false;
static uint32_t write_size = 0;
static l_u8 write_buffer[USB_BUFFER_SIZE];

void <node.name>_aoa_initialize()
{
    // Setup the AOA and USB
    AndroidAppStart(&device_info);
    USBHostInit(0);
}

void <node.name>_aoa_update()
{
    USBHostTasks();
    AndroidTasks();

    if(!device_attached)
        return;

    if (read_in_progress) {
        if (AndroidAppIsReadComplete(device_handle, &error_code, &read_size)) {
            read_in_progress = false;
        }
    } else {
        uint32_t index = 0;
        while (index \< read_size) {
            struct usb_message* message = (struct usb_message*)(read_buffer + index);
            index += sizeof(struct usb_message_header) + message->header.length;

            // TODO check command
            switch (message->header.sid) {
<node.publishFrames:{frame|<frame.signals:{signal|

            <signal:(signal.signalType_AOARead)()>}>}>
            }
        }

        if (device_attached) {
            read_in_progress = (AndroidAppRead(device_handle, read_buffer, USB_BUFFER_SIZE) == USB_SUCCESS);
        }
    }

    if(!device_attached)
        return;

    if (write_in_progress) {
        uint32_t size;
        if (AndroidAppIsWriteComplete(device_handle, &error_code, &size)) {
            if (size != write_size) {
                // TODO error??
            }
            write_size = 0;
            write_in_progress = false;
        }
    } else {
        while (write_size \< (USB_BUFFER_SIZE - MAX_USB_MESSAGE_SIZE)) {
            struct usb_message* message = (struct usb_message*)(write_buffer + write_size);
            message->header.comm = USBMESSAGE_COMM_SET_VAR;

<node.subscribeFrames:{frame|<frame.signals:{signal|
            if(l_flg_tst_<signal.name>()) {
                l_flg_clr_<signal.name>();
                <signal:(signal.signalType_AOAWrite)()>
            \}};separator=" else ">};separator=" else ">
            else {
                break;
            }
        }

<node.publishFrames:{frame|<frame.signals:{signal|
        if(write_size \< (USB_BUFFER_SIZE - MAX_USB_MESSAGE_SIZE)) {
            struct usb_message* message = (struct usb_message*)(write_buffer + write_size);
            message->header.comm = USBMESSAGE_COMM_SET_VAR;
            <signal:(signal.signalType_AOAWrite)()>
        \}};separator="\n">};separator="\n">

        if (device_attached && write_size > 0) {
            write_in_progress = (AndroidAppWrite(device_handle, write_buffer, write_size) == USB_SUCCESS);
        }
    }
}

bool usb_application_event_handler(uint8_t address, USB_EVENT event, void* data, uint32_t size)
{
    switch ((int)event) {
    case EVENT_VBUS_REQUEST_POWER: {
        if (((USB_VBUS_POWER_EVENT_DATA*)data)->current \<= (MAX_ALLOWED_CURRENT / 2))
            return true;
        break;
    }
    case EVENT_VBUS_RELEASE_POWER:
    case EVENT_HUB_ATTACH:
    case EVENT_UNSUPPORTED_DEVICE:
    case EVENT_CANNOT_ENUMERATE:
    case EVENT_CLIENT_INIT_ERROR:
    case EVENT_OUT_OF_MEMORY:
    case EVENT_UNSPECIFIED_ERROR:
    case EVENT_DETACH:
    case EVENT_ANDROID_DETACH: {
        device_attached = false;
        return true;
    }
    case EVENT_ANDROID_ATTACH: {
        device_attached = true;
        device_handle = data;
        return true;
    }
    default: {
        break;
    }
    }
    return false;
}

bool usb_application_data_event_handler(uint8_t address, USB_EVENT event, void* data, uint32_t size)
{
    return false;
}

void __attribute__((interrupt, auto_psv)) _USB1Interrupt()
{
    USB_HostInterruptHandler();
}
>>

boolAOARead(signal) ::= <<
case <signal.SID.hex>ul: { // <signal.name>
    l_bool_wr_<signal.name>(*((l_bool*)message->data));
    break;
}
>>

u8AOARead(signal) ::= <<
case <signal.SID.hex>ul: { // <signal.name>
    l_u8_wr_<signal.name>(*((l_u8*)message->data));
    break;
}
>>

u16AOARead(signal) ::= <<
case <signal.SID.hex>ul: { // <signal.name>
    l_u16_wr_<signal.name>(*((l_u16*)message->data));
    break;
}
>>


boolAOAWrite(signal) ::= <<
message->header.sid = <signal.SID.hex>ul;
message->header.length = 1;
*((l_bool*)message->data) = l_bool_rd_<signal.name>();
write_size += sizeof(struct usb_message_header) + message->header.length;
>>

u8AOAWrite(signal) ::= <<
message->header.sid = <signal.SID.hex>ul;
message->header.length = 1;
*((l_u8*)message->data) = l_u8_rd_<signal.name>();
write_size += sizeof(struct usb_message_header) + message->header.length;
>>

u16AOAWrite(signal) ::= <<
message->header.sid = <signal.SID.hex>ul;
message->header.length = 2;
*((l_u16*)message->data) = l_u16_rd_<signal.name>();
write_size += sizeof(struct usb_message_header) + message->header.length;
>>

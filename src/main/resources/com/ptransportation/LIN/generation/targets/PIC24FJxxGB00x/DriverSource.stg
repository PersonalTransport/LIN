targetIncludes(options,node,interface,target) ::= <<
#include "../mcc_generated_files/mcc.h"
#include \<xc.h>
>>

targetGlobals(options,node,interface,target) ::= <<
>>

systemInitialization(options,node,interface,target) ::= <<
// TODO implement!
>>

interfaceGlobals(options,node,interface,target) ::= <<
void l_ifc_aux_<interface.name>() {
    if(rx_buffer.state == L_BREAK_SYNC) {
        <if(node.master)><interfaceRxData("l_u8 sync0x55",node,interface,target)>
        (void)sync0x55;<endif>
        rx_buffer.PID = 0xFF;
        rx_buffer.size = 0;
        rx_buffer.index = 0;
        rx_buffer.data.scalar = 0;
        rx_buffer.state = L_PID;
    }
    else if(<interface.statusRegister>.FERR) {
        rx_buffer.state = L_BREAK_SYNC;
        while(U1RX_GetValue() != 1);
        <if(node.slave)><interface.modeRegister>.ABAUD = 1;<endif>
    }
}

void __attribute__((interrupt, no_auto_psv)) _U<interface.version>TXInterrupt()
{
    if (<interface.txInterruptFlag>) {
        <interface.txInterruptFlag> = 0;
        l_ifc_tx_<interface.name>();
    }
}

void __attribute__((interrupt, no_auto_psv)) _U<interface.version>RXInterrupt()
{
    if (<interface.rxInterruptFlag>) {
        <interface.rxInterruptFlag> = 0;
        l_ifc_rx_<interface.name>();
    }
}
>>

interfaceInitialization(options,node,interface,target) ::= <<
<interface.modeRegister>.BRGH  = 1; // High Baud Rate
<interface.modeRegister>.PDSEL = 0; // 8-bit data, no parity
<interface.modeRegister>.STSEL = 0; // One stop bit

<interface.statusRegister>.UTXISEL1 = 1; // Interrupt when the last character is shifted out of the Transmit Shift Register; all transmit operations are completed. Part(1/2)
<interface.statusRegister>.UTXISEL0 = 0; // Part (2/2)

<interface.statusRegister>.URXISEL1 = 0;
<interface.statusRegister>.URXISEL0 = 0;

l_sys_irq_disable();
<interface.modeRegister>.UARTEN = 1; // Enable the UART 1 module.
>>

interfaceRxDataAvailable(options,node,interface,target) ::= "<interface.statusRegister>.URXDA"

interfaceRxData(cVarToStoreIn,node,interface,target) ::= "<cVarToStoreIn> = (l_u8)<interface.rxRegister>;"

interfaceTxData(cVarToTx,node,interface,target) ::= <<
<interface.statusRegister>.UTXEN  = 1; // Signal the send 2 clock cycles from now.
<interface.txRegister> = (l_u8)<cVarToTx>;
>>

interfaceTxBreakAndSync(options,node,interface,target) ::= <<
// Send the break and sync.
while(!<interface.statusRegister>.TRMT); // Wait for tx to complete.
<interface.statusRegister>.UTXEN  = 1; // Signal the send 2 clock cycles from now.
<interface.statusRegister>.UTXBRK = 1; // Enable a break sequence.
<interface.txRegister> = 0x00;  // Value is ignored.
<interface.txRegister> = 0x55; // Send the sync character.
>>

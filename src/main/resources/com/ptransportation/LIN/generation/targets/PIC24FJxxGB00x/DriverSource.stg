targetIncludes(options,node,interface,target) ::= <<
#include \<xc.h>

#if !defined(PIC24FJxxGBxxx) && !defined(PIC24FJxxGAxxx)
#include "../mcc_generated_files/mcc.h"
#endif

#ifndef FCY
#error "FCY must be defined while compiling <node.name>.c"
#endif
>>

targetGlobals(options,node,interface,target) ::= <<
>>

systemInitialization(options,node,interface,target) ::= <<
// TODO implement!
>>

interfaceGlobals(options,node,interface,target) ::= <<
void l_ifc_aux_<interface.name>() {
    if(rx_buffer.state == L_BREAK_SYNC) {
        <if(node.master)><interfaceRxData("l_u8 sync0x55",node,interface,target)>
        (void)sync0x55;<endif>
        rx_buffer.PID = 0xFF;
        rx_buffer.size = 0;
        rx_buffer.index = 0;
        rx_buffer.data.scalar = 0;
        rx_buffer.state = L_PID;
    }
    else if(<interface.statusRegister>.FERR) {
        rx_buffer.state = L_BREAK_SYNC;
        #if defined(PIC24FJxxGBxxx) || defined(PIC24FJxxGAxxx)
        while(PORTBbits.RB3 != 1);
        #else
        while(U1RXGetValue() != 1);
        #endif
        <if(node.slave)><interface.modeRegister>.ABAUD = 1;<endif>
    }
}

void __attribute__((interrupt, no_auto_psv)) _U<interface.version>TXInterrupt()
{
    if (<interface.txInterruptFlag>) {
        <interface.txInterruptFlag> = 0;
        l_ifc_tx_<interface.name>();
    }
}

void __attribute__((interrupt, no_auto_psv)) _U<interface.version>RXInterrupt()
{
    if (<interface.rxInterruptFlag>) {
        <interface.rxInterruptFlag> = 0;
        l_ifc_rx_<interface.name>();
    }
}
>>

interfaceInitialization(options,node,interface,target) ::= <<

#if defined(PIC24FJxxGBxxx) || defined(PIC24FJxxGAxxx)
//========================================================================//
#if defined(PIC24FJxxGBxxx)
AD1PCFGL = 0xFFFF;
#elif defined(PIC24FJxxGAxxx)
AD1PCFG = 0xFFFF;
#endif

TRISBbits.TRISB4  = 0; // Turn RB4 into output for CS/LWAKE
TRISBbits.TRISB7  = 0; // Turn RB7 into output for !FAULT/TXE
TRISBbits.TRISB15 = 0;  // Turn RB15 into output for UART1 TX
TRISBbits.TRISB3  = 1;  // Turn RB3 into input for UART1 RX

// Force MCP2050 into operation mode
LATBbits.LATB15 = 1;
LATBbits.LATB4 = 1;
LATBbits.LATB7 = 1;
#else
// Force MCP2050 into operation mode
U1TXSetHigh();
CS_LWAKESetHigh();
NFAULT_TXESetHigh();
#endif

//========================================================================//

#if defined(PIC24FJxxGBxxx) || defined(PIC24FJxxGAxxx)
//========================================================================//
//Setup peripheral pin select (http://ww1.microchip.com/downloads/en/DeviceDoc/70234B.pdf#page=12)
//Input setup                 (http://ww1.microchip.com/downloads/en/DeviceDoc/39940d.pdf#page=130)
//Output setup                (http://ww1.microchip.com/downloads/en/DeviceDoc/39940d.pdf#page=131)

//Unlock the registers by setting bit 6 of OSCCON to 0 (http://ww1.microchip.com/downloads/en/DeviceDoc/39940d.pdf#page=110)
__builtin_write_OSCCONL(OSCCON & ~(1\<\<6));

//Configure Output Functions
RPOR7bits.RP15R = <interface.outputFunction>; //Assign U1TX To Pin RP15

//Configure Input Functions
<interface.inputFunction> = 3; //Assign U1RX To Pin RP3

//Lock the registers by setting bit 6 of OSCCON to 1 (http://ww1.microchip.com/downloads/en/DeviceDoc/39940d.pdf#page=110)
__builtin_write_OSCCONL(OSCCON | (1\<\<6));
//========================================================================//
#endif

//========================================================================//
// Section 21. UART http://ww1.microchip.com/downloads/en/DeviceDoc/en026583.pdf

// TODO make this adjustable.
// BRG = FCY    /(4*BAUD_RATE) - 1
<interface.baudRateRegister> = FCY/20000ul/4ul - 1; // Set Baud Rate to 20000

<interface.modeRegister>.BRGH  = 1; // High Baud Rate
<interface.modeRegister>.PDSEL = 0; // 8-bit data, no parity
<interface.modeRegister>.STSEL = 0; // One stop bit

<interface.statusRegister>.UTXISEL1 = 1; // Interrupt when the last character is shifted out of the Transmit Shift Register; all transmit operations are completed. Part(1/2)
<interface.statusRegister>.UTXISEL0 = 0; // Part (2/2)

<interface.statusRegister>.URXISEL1 = 0;
<interface.statusRegister>.URXISEL0 = 0;

l_sys_irq_disable();
<interface.modeRegister>.UARTEN = 1; // Enable the UART 1 module.
>>

interfaceRxDataAvailable(options,node,interface,target) ::= "<interface.statusRegister>.URXDA"

interfaceRxData(cVarToStoreIn,node,interface,target) ::= "<cVarToStoreIn> = (l_u8)<interface.rxRegister>;"

interfaceTxData(cVarToTx,node,interface,target) ::= <<
<interface.statusRegister>.UTXEN  = 1; // Signal the send 2 clock cycles from now.
<interface.txRegister> = (l_u8)<cVarToTx>;
>>

interfaceTxBreakAndSync(options,node,interface,target) ::= <<
// Send the break and sync.
while(!<interface.statusRegister>.TRMT); // Wait for tx to complete.
<interface.statusRegister>.UTXEN  = 1; // Signal the send 2 clock cycles from now.
<interface.statusRegister>.UTXBRK = 1; // Enable a break sequence.
<interface.txRegister> = 0x00;  // Value is ignored.
<interface.txRegister> = 0x55; // Send the sync character.
>>
